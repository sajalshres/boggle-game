{"version":3,"sources":["redux/reducers/gameReducer.js","redux/reducers/rankReducer.js","redux/reducers/index.js","redux/actions/actionTypes.js","redux/store.js","components/Header.js","components/Home.js","redux/actions/index.js","redux/actions/fetchRank.js","components/Rank.js","redux/actions/fetchGame.js","redux/actions/submitGame.js","components/Boggle/components/Game/components/Letter.js","components/Boggle/components/Game/components/Board.js","components/Boggle/components/Game/components/Score.js","components/Boggle/components/Game/index.js","components/Boggle/components/Total.js","redux/actions/validateWord.js","components/Boggle/components/Submit.js","components/Boggle/components/SubmitRank.js","components/Boggle/components/Start.js","components/utils/Modal.js","components/Boggle/index.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["initialState","fetchPending","fetchError","board","words","input","totalScore","timeLimit","gameStarted","ranks","combineReducers","gameReducer","state","action","type","error","payload","toUpperCase","split","join","Object","assign","letter","word","length","total","rankReducer","middleWares","thunk","createStore","rootReducer","applyMiddleware","Header","className","to","icon","faHome","faGamepad","faTrophy","Home","href","target","apiRequestError","resetGame","fetchRank","dispatch","fetch","then","response","json","catch","Rank","componentDidMount","props","getRanks","map","rank","index","key","user_name","total_score","created_at","this","Component","mapDispatchToProps","connect","sort","rank1","rank2","fetchGame","submitGame","game","method","headers","Accept","body","JSON","stringify","Letter","row","col","onClick","appendInput","Board","getLetterDivs","Array","fill","idx","Math","floor","bind","React","Game","Total","intervalId","setInterval","timer","componentWillUnmount","clearInterval","setState","currentCount","onTimeOut","validateWord","toLowerCase","updateWord","Submit","handleClick","event","preventDefault","isInputValid","console","log","resetInput","indexedBoard","letters","reduce","agg","includes","i","keys","isAdjacentLetterValid","string","pos","remainingBoard","nextLetter","moves","getMoves","result","slice","isAtRightEdge","isAtLeftEdge","isAtTopEdge","isAtBottomEdge","TypeError","push","id","name","value","onChange","updateInput","disabled","updateScore","SubmitRank","handleChange","handleSubmit","placeholder","Start","Modal","show","handleClose","title","children","class","faTimes","Boogle","showScoreModal","scoreModalVisible","hideScoreModal","handleUserInputChange","userName","handleSubmitRank","a","startGame","Footer","App","store","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.be877fa9.chunk.js","sourcesContent":["import {\n  API_REQUEST_PENDING,\n  API_REQUEST_ERROR,\n  FETCH_GAME_SUCCESS,\n  UPDATE_INPUT,\n  APPEND_INPUT,\n  RESET_INPUT,\n  UPDATE_WORD,\n  UPDATE_SCORE,\n  START_GAME,\n  RESET_GAME\n} from '../actions/actionTypes';\n\nexport const initialState = {\n  fetchPending: false,\n  fetchError: null,\n  board: null,\n  words: [],\n  input: '',\n  totalScore: 0,\n  timeLimit: 180,\n  gameStarted: false\n};\n\nexport function gameReducer(state = initialState, action) {\n  switch (action.type) {\n    case API_REQUEST_PENDING:\n      return {\n        ...state,\n        fetchPending: true,\n        error: null\n      };\n    case FETCH_GAME_SUCCESS:\n      return {\n        ...initialState,\n        fetchPending: false,\n        board: action.payload.board,\n        gameStarted: true\n      };\n    case API_REQUEST_ERROR:\n      return {\n        ...state,\n        fetchPending: false,\n        fetchError: action.payload.error\n      };\n    case UPDATE_INPUT:\n      return {\n        ...state,\n        input: action.payload.input\n          .toUpperCase()\n          .split(' ')\n          .join('')\n      };\n    case APPEND_INPUT:\n      return Object.assign({}, state, {\n        input: state.input + action.payload.letter\n      });\n    case RESET_INPUT:\n      return {\n        ...state,\n        input: ''\n      };\n    case UPDATE_WORD:\n      return Object.assign({}, state, {\n        words: [...state.words, action.payload.word],\n        totalScore: state.totalScore + action.payload.word.length\n      });\n    case UPDATE_SCORE:\n      return {\n        ...state,\n        totalScore: action.payload.total\n      };\n    case START_GAME:\n      return {\n        ...initialState,\n        gameStarted: true\n      };\n    case RESET_GAME:\n      return {\n        state: initialState\n      };\n    default:\n      return state;\n  }\n}\n\nexport const getBoard = state => state.gameReducer.board;\nexport const gethFetchPending = state => state.gameReducer.fetchPending;\nexport const getFetchError = state => state.gameReducer.fetchError;\nexport const getWords = state => state.gameReducer.words;\n","import {\n  API_REQUEST_PENDING,\n  API_REQUEST_ERROR,\n  FETCH_RANK_SUCCESS\n} from '../actions/actionTypes';\n\nconst initialState = {\n  fetchPending: false,\n  fetchError: false,\n  ranks: []\n};\n\nexport function rankReducer(state = initialState, action) {\n  switch (action.type) {\n    case API_REQUEST_PENDING:\n      return {\n        ...state,\n        fetchPending: true,\n        fetchError: null\n      };\n    case API_REQUEST_ERROR:\n      return {\n        ...state,\n        fetchPending: false,\n        fetchError: action.payload.error\n      };\n    case FETCH_RANK_SUCCESS:\n      return {\n        ...state,\n        fetchPending: false,\n        ranks: action.payload.ranks\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\nimport { gameReducer } from './gameReducer';\nimport { rankReducer } from './rankReducer';\n\nexport default combineReducers({\n  gameReducer,\n  rankReducer\n});\n","// api request action types\nexport const API_REQUEST_PENDING = 'API_REQUEST_PENDING';\nexport const API_REQUEST_ERROR = 'API_REQUEST_ERROR';\n\n// Fetch new game action types\nexport const FETCH_GAME_SUCCESS = 'FETCH_GAME_SUCCESS';\n\n// Update input from action types\nexport const UPDATE_INPUT = 'UPDATE_INPUT';\nexport const APPEND_INPUT = 'APPEND_INPUT';\nexport const RESET_INPUT = 'RESET_INPUT';\n\n// Update words after validation with server\nexport const UPDATE_WORD = 'UPDATE_WORD';\n\n// Total score action types\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const RESET_SCORE = 'RESET_SCORE';\n\n// Game status action types\nexport const START_GAME = 'START_GAME';\nexport const RESET_GAME = 'RESET_GAME';\n\n// Fetch rank\nexport const FETCH_RANK_SUCCESS = 'FETCH_RANK_SUCCESS';\n","import { applyMiddleware, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst middleWares = [thunk];\n\nexport default createStore(rootReducer, applyMiddleware(...middleWares));\n","/**\n * @file Header component of the Boggle game\n * @author sajalshres\n */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHome, faGamepad, faTrophy } from '@fortawesome/free-solid-svg-icons';\n\nconst Header = () => {\n  return (\n    <header className=\"header\">\n      <h1 className=\"logo\">Boggle</h1>\n      <ul className=\"nav\">\n        <Link to=\"/\">\n          <li className=\"nav-item\">\n            <FontAwesomeIcon icon={faHome} className=\"btn\" />\n          </li>\n        </Link>\n        <Link to=\"/game\">\n          <li className=\"nav-item\">\n            <FontAwesomeIcon icon={faGamepad} className=\"btn\" />\n          </li>\n        </Link>\n        <Link to=\"/rank\">\n          <li className=\"nav-item\">\n            <FontAwesomeIcon icon={faTrophy} className=\"btn\" />\n          </li>\n        </Link>\n      </ul>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Home = () => {\n  return (\n    <div className=\"home\">\n      <h1 className=\"title is-1 is-centered\">Welcome</h1>\n      <div className=\"description\">\n        <p className=\"is-justified\">\n          Boggle is a word game invented by Allan Turoff and originally\n          distributed by Parker Brothers. The game is played using a plastic\n          grid of lettered dice, in which players attempt to find words in\n          sequences of adjacent letters.\n        </p>\n        <h2 className=\"title is-2 is-centered\">Rules</h2>\n        <ul>\n          <li>Players have three minutes</li>\n          <li>Player will have to find as many words as thay can in board.</li>\n          <li>Letters mush be adjoining in a chain.</li>\n          <li>\n            Letter chain may be adjacent horizontally, vertically or diagonally\n          </li>\n          <li>Words must contain at least three letters.</li>\n          <li>\n            No letter cube may be used more than once within a single word.\n          </li>\n          <li>You can type the words in the input box as well.</li>\n        </ul>\n        <a\n          href=\"https://en.wikipedia.org/wiki/Boggle\"\n          target=\"_blank\"\n          className=\"link\"\n        >\n          read more...\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import {\n  API_REQUEST_PENDING,\n  API_REQUEST_ERROR,\n  FETCH_GAME_SUCCESS,\n  SUBMIT_GAME_SUCCESS,\n  UPDATE_INPUT,\n  APPEND_INPUT,\n  RESET_INPUT,\n  UPDATE_WORD,\n  UPDATE_SCORE,\n  START_GAME,\n  END_GAME,\n  RESET_GAME,\n  FETCH_RANK_SUCCESS\n} from './actionTypes';\n\nexport const apiRequestPending = () => ({ type: API_REQUEST_PENDING });\n\nexport const apiRequestError = error => ({\n  type: API_REQUEST_ERROR,\n  payload: { error }\n});\n\nexport const fetchGameSuccess = board => ({\n  type: FETCH_GAME_SUCCESS,\n  payload: { board }\n});\n\nexport const updateInput = input => ({\n  type: UPDATE_INPUT,\n  payload: { input }\n});\n\nexport const appendInput = letter => ({\n  type: APPEND_INPUT,\n  payload: { letter }\n});\n\nexport const resetInput = () => ({ type: RESET_INPUT });\n\nexport const updateWord = word => ({\n  type: UPDATE_WORD,\n  payload: { word }\n});\n\nexport const updateScore = total => ({\n  type: UPDATE_SCORE,\n  payload: { total }\n});\n\nexport const startGame = () => ({\n  type: START_GAME\n});\n\nexport const resetGame = () => ({\n  type: RESET_GAME\n});\n\nexport const fetchRankSuccess = ranks => ({\n  type: FETCH_RANK_SUCCESS,\n  payload: { ranks }\n});\n","import { apiRequestPending, apiRequestError, fetchRankSuccess } from './index';\n\nfunction fetchRank() {\n  return dispatch => {\n    dispatch(apiRequestPending());\n    return fetch('/api/v1/games')\n      .then(response => response.json())\n      .then(json => {\n        if (json.error) {\n          throw json.error;\n        }\n        dispatch(fetchRankSuccess(json));\n      })\n      .catch(error => {\n        dispatch(apiRequestError(error));\n      });\n  };\n}\n\nexport default fetchRank;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport fetchRank from '../redux/actions/fetchRank';\n\nexport class Rank extends Component {\n  componentDidMount = () => {\n    const { fetchRank } = this.props;\n    fetchRank();\n  };\n\n  getRanks = () => {\n    return this.props.ranks.map((rank, index) => {\n      return (\n        <tr key={index}>\n          <td>{rank.user_name}</td>\n          <td>{rank.total_score}</td>\n          <td>{rank.words}</td>\n          <td>{rank.created_at.split('T')[0]}</td>\n        </tr>\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"rank\">\n        <h1 className=\"title is-1 is-centered\">Rank Page</h1>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th className=\"rank-name\">Name</th>\n              <th className=\"rank-score\">Score</th>\n              <th className=\"rank-words\">Words</th>\n              <th className=\"rank-date\">Date</th>\n            </tr>\n          </thead>\n          <tbody>{this.getRanks()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  fetchPending: state.rankReducer.fetchPending,\n  fetchError: state.rankReducer.fetchError,\n  ranks: state.rankReducer.ranks.sort((rank1, rank2) =>\n    rank1.total_score < rank2.total_score ? 1 : -1\n  )\n});\n\nconst mapDispatchToProps = {\n  fetchRank\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Rank);\n","import { apiRequestPending, apiRequestError, fetchGameSuccess } from './index';\n\nfunction fetchGame() {\n  return dispatch => {\n    dispatch(apiRequestPending());\n    return fetch('/api/v1/games/new')\n      .then(response => response.json())\n      .then(json => {\n        if (json.error) {\n          throw json.error;\n        }\n        dispatch(fetchGameSuccess(json.board));\n      })\n      .catch(error => {\n        dispatch(apiRequestError(error));\n      });\n  };\n}\n\nexport default fetchGame;\n","import { apiRequestPending, apiRequestError, resetGame } from './index';\n\nfunction submitGame(game) {\n  return dispatch => {\n    dispatch(apiRequestPending());\n    return fetch('/api/v1/games/create', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(game)\n    })\n      .then(response => response.json())\n      .then(json => {\n        if (json.error) {\n          throw json.error;\n        }\n        if (json) {\n          dispatch(resetGame());\n        }\n      })\n      .catch(error => {\n        dispatch(apiRequestError(error));\n      });\n  };\n}\n\nexport default submitGame;\n","/**\n * @file Letter component of the Boggle game\n * @author sajalshres\n */\n\nimport React from 'react';\n\nconst Letter = props => {\n  return (\n    <button\n      className=\"letter\"\n      row={props.row}\n      col={props.col}\n      onClick={props.appendInput ? () => props.appendInput(props.letter) : null}\n    >\n      {props.letter}\n    </button>\n  );\n};\n\nexport default Letter;\n","/**\n * @file Main Board component of the boggle game\n * @author sajalshres\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { appendInput } from '../../../../../redux/actions';\nimport Letter from './Letter';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.getLetterDivs = this.getLetterDivs.bind(this);\n  }\n\n  getLetterDivs = board => {\n    let boardLetters = board\n      ? board\n      : Array(16)\n          .fill(' ')\n          .join('');\n    return boardLetters.split('').map((letter, idx) => {\n      return (\n        <Letter\n          letter={letter}\n          key={idx}\n          row={idx % 4}\n          col={Math.floor(idx / 4)}\n          appendInput={board ? this.props.appendInput : null}\n        />\n      );\n    });\n  };\n\n  render() {\n    return <div className=\"board\">{this.getLetterDivs(this.props.board)}</div>;\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.gameReducer.board\n});\n\nconst mapDispatchToProps = {\n  appendInput\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","/**\n * @file Score compenent of boogle game\n * @author sajalshres\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nconst Score = ({ words }) => {\n  const showScore = () => {\n    return words.map((word, idx) => {\n      return (\n        <tr key={idx}>\n          <td>{word}</td>\n          <td>{word.length}</td>\n        </tr>\n      );\n    });\n  };\n  return (\n    <div className=\"score\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th className=\"score-word\">Word</th>\n            <th className=\"score-total\">Score</th>\n          </tr>\n        </thead>\n        <tbody>{words ? showScore() : null}</tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  const words = state.gameReducer.words;\n  return { words };\n};\n\nexport default connect(mapStateToProps, null)(Score);\n","/**\n * @file Game component of the boggle game\n * @author sajalshres\n */\n\nimport React from 'react';\nimport Board from './components/Board';\nimport Score from './components/Score';\n\nconst Game = () => {\n  return (\n    <div className=\"game\">\n      <Board />\n      <Score />\n    </div>\n  );\n};\n\nexport default Game;\n","/**\n * @file Total score component of boggle game\n * @author sajalshres\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\n\nexport class Total extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentCount: this.props.timeLimit\n    };\n  }\n\n  componentDidMount = () => {\n    this.intervalId = setInterval(this.timer.bind(this), 1000);\n  };\n\n  componentWillUnmount = () => {\n    clearInterval(this.intervalId);\n  };\n\n  timer = () => {\n    this.setState({\n      currentCount: this.state.currentCount - 1\n    });\n    //clear interval\n    if (this.state.currentCount < 1) {\n      clearInterval(this.intervalId);\n      this.props.onTimeOut();\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"total\">\n        <div className=\"total-timer\">\n          Timer <span>{this.state.currentCount}</span>\n        </div>\n        <div className=\"total-score\">\n          Total <span>{this.props.total}</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  total: state.gameReducer.totalScore,\n  timeLimit: state.gameReducer.timeLimit,\n  gameStarted: state.gameReducer.gameStarted\n});\n\nexport default connect(mapStateToProps, null)(Total);\n","import { apiRequestPending, apiRequestError, updateWord } from './index';\n\nfunction validateWord(word) {\n  return dispatch => {\n    dispatch(apiRequestPending());\n    return fetch('/api/v1/games/validate', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ word: word.toLowerCase() })\n    })\n      .then(response => response.json())\n      .then(json => {\n        if (json.error) {\n          throw json.error;\n        }\n        if (json) {\n          dispatch(updateWord(word));\n        }\n      })\n      .catch(error => {\n        dispatch(apiRequestError(error));\n      });\n  };\n}\n\nexport default validateWord;\n","/**\n * @file Submit component of the Boggle game\n * @author sajalshres\n */\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { updateInput, updateScore, resetInput } from '../../../redux/actions';\nimport validateWord from '../../../redux/actions/validateWord';\n\nexport class Submit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = event => {\n    event.preventDefault();\n    if (this.isInputValid()) {\n      this.props.validateWord(this.props.input);\n      //this.props.updateScore(29);\n    } else {\n      console.log('Word is not valid');\n    }\n\n    this.props.resetInput();\n  };\n\n  indexedBoard = letters => {\n    return letters.split('').reduce((agg, letter, index) => {\n      agg[index + 1] = letter;\n      return agg;\n    }, {});\n  };\n\n  isInputValid = () => {\n    const { input, words, board } = this.props;\n    if (input.length === 1) return board.includes(input);\n    else if (input.length < 3) return false;\n    else if (words.includes(input)) return false;\n    const indexedBoard = this.indexedBoard(board);\n    for (let i = 0; i <= Object.keys(indexedBoard).length; i++) {\n      if (indexedBoard[i] === input[0]) {\n        if (this.isAdjacentLetterValid(input, i, indexedBoard)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  isAdjacentLetterValid = (string, pos, board) => {\n    // string lenght 1 means valid\n    if (string.length === 1) return true;\n    const remainingBoard = Object.assign({}, board);\n    // remove the position from remaining board\n    delete remainingBoard[pos];\n    const nextLetter = string[1];\n    const moves = this.getMoves(pos);\n    for (let i = 0; i < moves.length; i++) {\n      if (remainingBoard[moves[i]] === nextLetter) {\n        const result = this.isAdjacentLetterValid(\n          string.slice(1),\n          moves[i],\n          remainingBoard\n        );\n        if (result) {\n          return result;\n        }\n      }\n    }\n    return false;\n  };\n\n  getMoves = pos => {\n    // pos 4, 8, 12, 16 are at right edge\n    const isAtRightEdge = pos => pos % 4 === 0;\n    // pos 1, 5, 9, 13 are at left edge\n    const isAtLeftEdge = pos => pos % 4 === 1;\n    // pos 1, 2, 3, 4 are at top edge\n    const isAtTopEdge = pos => pos <= 4;\n    // post 13, 14, 15, 16\n    const isAtBottomEdge = pos => pos >= 13;\n\n    const moves = [];\n    if (pos > 16) {\n      throw new TypeError('Invalid position type or value');\n    }\n    // if pos is not at right edge, can move right\n    if (!isAtRightEdge(pos)) {\n      moves.push(pos + 1);\n    }\n    // if pos is not at right and top edge, can move top right\n    if (!isAtRightEdge(pos) && !isAtTopEdge(pos)) {\n      moves.push(pos - 3);\n    }\n    // if pos is not at right and bottom edge, can move bottom right\n    if (!isAtRightEdge(pos) && !isAtBottomEdge(pos)) {\n      moves.push(pos + 5);\n    }\n    // if pos is not left edge, can move left\n    if (!isAtLeftEdge(pos)) {\n      moves.push(pos - 1);\n    }\n    // if pos is not at left and top edge, can move top left\n    if (!isAtLeftEdge(pos) && !isAtTopEdge(pos)) {\n      moves.push(pos - 5);\n    }\n    // if pos is not at left and bottom edget, can move at bottom left\n    if (!isAtLeftEdge(pos) && !isAtBottomEdge(pos)) {\n      moves.push(pos + 3);\n    }\n    // if pos is not at top edge, move top\n    if (!isAtTopEdge(pos)) {\n      moves.push(pos - 4);\n    }\n    // if pos is not at bottom edge, move bottom\n    if (!isAtBottomEdge(pos)) {\n      moves.push(pos + 4);\n    }\n    return moves;\n  };\n\n  render() {\n    return (\n      <div className=\"submit\">\n        <input\n          className=\"submit-input\"\n          type=\"text\"\n          id=\"name\"\n          name=\"name\"\n          value={this.props.input}\n          onChange={event => this.props.updateInput(event.target.value)}\n        />\n        <button\n          className=\"submit-button\"\n          disabled={!this.props.gameStarted}\n          onClick={this.handleClick}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  board: state.gameReducer.board,\n  words: state.gameReducer.words,\n  input: state.gameReducer.input,\n  gameStarted: state.gameReducer.gameStarted,\n  total: state.gameReducer.totalScore\n});\n\nconst mapDispatchToProps = {\n  updateInput,\n  resetInput,\n  updateScore,\n  validateWord\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Submit);\n","import React from 'react';\n\nconst SubmitRank = ({ total, handleChange, handleSubmit }) => {\n  return (\n    <div className=\"submit-rank\">\n      <h2 className=\"submit-rank__title is-3 is-centered\">Time Out</h2>\n      <p className=\"submit-rank__score is-centered\">You scored: {total}</p>\n\n      <input\n        className=\"submit-rank__input\"\n        type=\"text\"\n        id=\"username\"\n        name=\"username\"\n        placeholder=\"Your name\"\n        onChange={event => handleChange(event)}\n      />\n      <button\n        className=\"submit-rank__button\"\n        onClick={event => handleSubmit(event)}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default SubmitRank;\n","import React from 'react';\n\nconst Start = props => {\n  return (\n    <div className=\"total\">\n      <button className=\"start-btn\" onClick={() => props.fetchGame()}>\n        Start\n      </button>\n    </div>\n  );\n};\n\nexport default Start;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst Modal = ({ show, handleClose, title, children }) => {\n  return (\n    <div className={show ? 'modal display-block' : 'modal display-none'}>\n      <div className=\"modal-content\">\n        <div className=\"modal-header\">\n          <h2 class=\"modal-title is-3\">{title}</h2>\n          <span className=\"close\" onClick={handleClose}>\n            <FontAwesomeIcon icon={faTimes} />\n          </span>\n        </div>\n        <div className=\"modal-body\">{children}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","/**\n * @file Main component of the boggle game\n * @author sajalshres\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport fetchGame from '../../redux/actions/fetchGame';\nimport submitGame from '../../redux/actions/submitGame';\nimport { startGame, resetGame } from '../../redux/actions';\nimport Game from './components/Game';\nimport Total from './components/Total';\nimport Submit from './components/Submit';\nimport SubmitRank from './components/SubmitRank';\nimport Start from './components/Start';\nimport Modal from '../utils/Modal';\n\nexport class Boogle extends Component {\n  constructor(props) {\n    super(props);\n\n    // Local state\n    this.state = {\n      scoreModalVisible: false,\n      userName: '',\n      game: {}\n    };\n\n    // Bind function\n    this.showScoreModal = this.showScoreModal.bind(this);\n    this.hideScoreModal = this.hideScoreModal.bind(this);\n    this.handleUserInputChange = this.handleUserInputChange.bind(this);\n    this.handleSubmitRank = this.handleSubmitRank.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.onTimeOut = this.onTimeOut.bind(this);\n  }\n\n  componentDidMount = () => {\n    // Reset game when the component is mount\n    this.props.resetGame();\n  };\n\n  showScoreModal = () => {\n    // Show modal\n    this.setState({\n      scoreModalVisible: true\n    });\n  };\n\n  hideScoreModal = () => {\n    // Hide modal\n    this.setState({\n      scoreModalVisible: false\n    });\n    this.props.resetGame();\n  };\n\n  handleUserInputChange = event => {\n    // Update the username\n    this.setState({\n      userName: event.target.value\n    });\n  };\n\n  handleSubmitRank = async event => {\n    event.preventDefault();\n    // setState is asynchronous in React\n    await this.setState({\n      game: {\n        user_name: this.state.userName,\n        total_score: this.props.totalScore,\n        words: this.props.words.join(' ')\n      }\n    });\n    if (this.state.userName && Object.keys(this.state.game).length === 3) {\n      this.props.submitGame({ ...this.state.game });\n    }\n    this.hideScoreModal();\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n    this.props.startGame();\n  };\n\n  onTimeOut = () => {\n    // Show submit modal when time out\n    this.showScoreModal();\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <Game />\n        {!this.props.gameStarted ? (\n          <Start fetchGame={this.props.fetchGame} />\n        ) : (\n          <Total onTimeOut={this.onTimeOut} resetGame={this.props.resetGame} />\n        )}\n        <Submit />\n        <Modal\n          show={this.state.scoreModalVisible}\n          handleClose={this.hideScoreModal}\n          title=\"Submit Score\"\n        >\n          <SubmitRank\n            total={this.props.totalScore}\n            handleChange={this.handleUserInputChange}\n            handleSubmit={this.handleSubmitRank}\n          />\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  fetchPending: state.gameReducer.fetchPending,\n  totalScore: state.gameReducer.totalScore,\n  words: state.gameReducer.words,\n  gameStarted: state.gameReducer.gameStarted\n});\n\nconst mapDispatchToProps = {\n  fetchGame,\n  startGame,\n  resetGame,\n  submitGame\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Boogle);\n","/**\n * @file Footer component of the Boggle game\n * @author sajalshres\n */\nimport React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      Made with <span className=\"love\">&#10084;</span> by sajalshres\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport store from './redux/store';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Rank from './components/Rank';\nimport Boogle from './components/Boggle';\nimport Footer from './components/Footer';\nimport './main.scss';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <main className=\"main\">\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/game\" component={Boogle} />\n              <Route path=\"/rank\" component={Rank} />\n            </Switch>\n          </main>\n          <Footer />\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}